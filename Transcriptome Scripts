# Check out ToxcodAn as the majority of this script is based on this material
#Rhett Rautsaw, Andrew Mason, and Samual Hirst also provided originally scripts for which mine are modified from.

#Load libraries
library(tidyverse)
library(ggplot2)
library(pheatmap)

#Load in the csv
TPM_df <- read_csv("Path_to_toxin_nontoxin_expression_tpm.csv")
TPM_df <- TPM_df %>% mutate_if(is.character,as.factor)

#source the below script from the toxcodan guide https://github.com/pedronachtigall/ToxCodAn/tree/master/Guide
source("PlottingFunctions.R")
TPM_df <- df_clean(TPM_df, class="class", toxin_family="toxin_family", colors=toxin_colors)

# Impute 0 values
# Take numeric values (columns 4-12), transpose them, impute zeros, and re-transpose
TPM_df2 <- t(cmultRepl(t(TPM_df[,4:25]),output = "p-counts"))

# Bind back to original dataframe
TPM_df2 <- cbind(TPM_df[,1:3], TPM_df2)
rownames(TPM_df2) <- TPM_df2$gene_id

#Plot the average transcriptome
FancyFigure(TPM_df2,"Average",class="class",toxin_family="toxin_family", colors=toxin_colors)

#There are also options to plot individuals or male/female average
FancyFigure(TPM_df2,"JLS178",class="class",toxin_family="toxin_family", colors=toxin_colors)
FancyFigure(TPM_df2,"JLS181",class="class",toxin_family="toxin_family", colors=toxin_colors)
FancyFigure(TPM_df2,"JLS187",class="class",toxin_family="toxin_family", colors=toxin_colors)
FancyFigure(TPM_df2,"JLS202",class="class",toxin_family="toxin_family", colors=toxin_colors)
FancyFigure(TPM_df2,"JLS216",class="class",toxin_family="toxin_family", colors=toxin_colors)
FancyFigure(TPM_df2,"JLS223",class="class",toxin_family="toxin_family", colors=toxin_colors)
FancyFigure(TPM_df2,"JLS224",class="class",toxin_family="toxin_family", colors=toxin_colors)
FancyFigure(TPM_df2,"JLS228",class="class",toxin_family="toxin_family", colors=toxin_colors)
FancyFigure(TPM_df2,"JLS242",class="class",toxin_family="toxin_family", colors=toxin_colors)
FancyFigure(TPM_df2,"JLS247",class="class",toxin_family="toxin_family", colors=toxin_colors)
FancyFigure(TPM_df2,"JLS248",class="class",toxin_family="toxin_family", colors=toxin_colors)
FancyFigure(TPM_df2,"JLS249",class="class",toxin_family="toxin_family", colors=toxin_colors)
FancyFigure(TPM_df2,"JLS253",class="class",toxin_family="toxin_family", colors=toxin_colors)
FancyFigure(TPM_df2,"JLS254",class="class",toxin_family="toxin_family", colors=toxin_colors)
FancyFigure(TPM_df2,"JLS255",class="class",toxin_family="toxin_family", colors=toxin_colors)
FancyFigure(TPM_df2,"JLS256",class="class",toxin_family="toxin_family", colors=toxin_colors)
FancyFigure(TPM_df2,"JLS257",class="class",toxin_family="toxin_family", colors=toxin_colors)
FancyFigure(TPM_df2,"JLS260",class="class",toxin_family="toxin_family", colors=toxin_colors)
FancyFigure(TPM_df2,"JLS269",class="class",toxin_family="toxin_family", colors=toxin_colors)
FancyFigure(TPM_df2,"Female_Average",class="class",toxin_family="toxin_family", colors=toxin_colors)
FancyFigure(TPM_df2,"Male_Average",class="class",toxin_family="toxin_family", colors=toxin_colors)

#Obtain just the pie graphs to generate male and femaale comparison
ToxinPie(TPM_df2, "Female_Average", class="class")
ToxinPie(TPM_df2, "Male_Average", class="class")

### DESEQ2 & Volcano Plots orginal script provided by Samuel Hirst with modifications by Grace Coppinger

# There will be a bit of repeat from the normalization

# Read the CSV file as a data frame without specifying row names
countData_df <- read.csv("gene_count_matrix_GC.csv", row.names = NULL)

# Extract unique row names from the "gene_id" column and make them unique
unique_row_names <- make.unique(countData_df$gene_id)

# Assign unique row names to the data frame
rownames(countData_df) <- unique_row_names
countData_df <- countData_df[-1]

# Convert the data frame to a matrix
countData <- as.matrix(countData_df)

colData <- read.csv("Tsirt_meta_data.csv", row.names = "Sample_ID")
colData$Sex <- factor(colData$Sex, levels = c("F", "M"))

all(rownames(colData) %in% colnames(countData))

countData <- countData[, rownames(colData)]

all(rownames(colData) == colnames(countData))


## This will be for labeling the volcano plots
# I have all my venom genes annotated so they begin with VENOM-. If you don't have that, you'll just have to search using a long character string using the toxin gene names
Venom <- c("VENOM-")

#Convert count data to integers if necessary
countData <- round(countData)

ddsPop <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ Sex)

ddsPop <- DESeq(ddsPop)

resPop <- results(ddsPop, contrast=c("Sex", "F", "M"))

all_genes <- data.frame(gene = rownames(resPop), pvalue = resPop$padj, log2FoldChange = resPop$log2FoldChange)

#This is will now give me a dataframe of the LFS and padj. 
write.csv(all_genes, "DESEQ2_pop.csv")

all_genes_plot <- all_genes
rownames(all_genes_plot) <- all_genes_plot$gene
all_genes_plot <- all_genes_plot[-1]

venom_genes <- all_genes[grepl(paste(Venom, collapse="|"), all_genes$gene), ]

significant_venom_genes <- venom_genes %>%
  filter(abs(log2FoldChange) >= 1, !is.na(pvalue), pvalue < 0.05)

Male_genes <- all_genes %>%
  filter(log2FoldChange <= -1, !is.na(pvalue), pvalue < 0.05)

Female_genes <- all_genes %>%
  filter(log2FoldChange >= 1, !is.na(pvalue), pvalue < 0.05)

keyvals <- ifelse(
  resPop$log2FoldChange < -1.0, '#2f2aa0',
  ifelse(resPop$log2FoldChange > 1.0, '#d30b94',
         'black'))
# Update 'keyvals' to set the color of selected genes to mAgenta
keyvals[rownames(resPop) %in% significant_venom_genes$gene] <- '#CCFF23'
keyvals[is.na(keyvals)] <- 'black'
names(keyvals)[keyvals == '#d30b94'] <- 'Female Biased'
names(keyvals)[keyvals == '#CCFF23'] <- 'Biased Venom Gene'
names(keyvals)[keyvals == '#2f2aa0'] <- 'Male Biased'

EnhancedVolcano(all_genes_plot,
                lab = rownames(all_genes_plot),
                x = 'log2FoldChange',
                y = 'pvalue',
                selectLab = c(significant_venom_genes$gene),
                pCutoff = 0.05,
                FCcutoff = 1,
                pointSize = 2.0,
                labSize = 3,
                labCol = 'black',
                labFace = 'bold',
                legendLabSize = 14,
                legendIconSize = 4.0,
                drawConnectors = TRUE,
                widthConnectors = 0.5,
                colConnectors = 'black', 
                max.overlaps = 100, 
                xlim = c(-14, 12),
                ylim = c(0, -log10(10e-12)),
                colCustom = keyvals)

#Linear regression created by Grace Coppinger
Sample<- read_csv("/Users/gracecoppinger/Desktop/Tsirt_samples.csv")

#The following is an example from just 3FTx. I repeated this script with al major toxin families and the average toxin expressions as well.
# Perform linear regression
M_lm_model_3FTx <- lm(Avg_3FTx ~ SVL, data = Sample, subset = Sex == "M")
F_lm_model_3FTx <- lm(Avg_3FTx ~ SVL, data = Sample, subset = Sex == "F")

# Extract R-squared value and p-value
F_r_squared_3FTx <- summary(F_lm_model_3FTx)$r.squared
F_r_squared_3FTx
F_p_value_3FTx <- summary(F_lm_model_3FTx)$coefficients[2,4]
F_p_value_3FTx
M_r_squared_3FTx <- summary(M_lm_model_3FTx)$r.squared
M_r_squared_3FTx
M_p_value_3FTx <- summary(M_lm_model_3FTx)$coefficients[2,4]
M_p_value_3FTx

# Create scatter plot with linear regression line
FTx_plot <- ggplot(data=Sample, aes(x=SVL, y=Ftxed, colour=Sex)) +
  geom_point() +
  geom_smooth(method = "glm", se = FALSE) + theme_bw() +
  labs(y = "3FTx Transcripts > 500", x= "Snout Vent Length(cm)") + 
  scale_color_manual(values=c("#d30b94", "#2f2aa0"))
FTx_plot
